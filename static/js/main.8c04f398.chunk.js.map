{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","console","log","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAEaA,EAAO,SAAAC,GAAK,OACtB,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACR,6BAAKJ,EAAMG,QAAQE,OACnB,4BAAIL,EAAMG,QAAQG,YCHVC,G,MAAW,SAAAP,GACpB,OACI,qBAAKC,UAAU,YAAf,SACCD,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCJ7CM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOX,UAAU,SACjBY,KAAK,SACLF,YAAeA,EACfG,SAAWF,MC0BAG,G,wDA3Bb,aAAc,IAAD,8BACX,gBAWFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,QAAQ,kBAAMC,QAAQC,IAAI,EAAKC,WAXpE,EAAKA,MAAQ,CACXf,SAAU,GACVU,YAAa,IAJJ,E,qDAOb,WAAoB,IAAD,OACjBM,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACT,SAAUoB,S,oBAK1C,WAAS,IAAD,EAC4BC,KAAKN,MAA/Bf,EADF,EACEA,SAAUU,EADZ,EACYA,YACZY,EAAmBtB,EAASuB,QAAO,SAAA5B,GAAO,OAAIA,EAAQE,KAAK2B,cAAcC,SAASf,EAAYc,kBACpG,OACE,sBAAK/B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWU,YAAY,iBAAiBC,aAAeiB,KAAKjB,eAC5D,cAAC,EAAD,CAAUJ,SAAYsB,W,GAvBZI,cCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8c04f398.chunk.js","sourcesContent":["import react from 'react';\nimport './card.style.css'; \nexport const Card = props => (\n   <div className='card-container'>\n     <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n     <h3>{props.monster.name}</h3>\n     <p>{props.monster.email}</p>\n   </div>\n   )","import React from 'react'\nimport {Card} from '../card/card.component';\nimport './card-list.styles.css';\nexport const CardList = props => {\n    return(\n        <div className='card-list'>\n        {props.monsters.map(monster => <Card key={monster.id} monster={monster} />)}\n        </div>\n    )\n}\n","import React from 'react';\nimport './search-box.styles.css';\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input className='search' \n    type='search' \n    placeholder = {placeholder}\n    onChange= {handleChange}/>\n)","import {Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\nimport './App.css';\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n  handleChange = e => {\n    this.setState({searchField: e.target.value}, () => console.log(this.state))\n  }\n  render(){\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return(\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder='Search Monster' handleChange= {this.handleChange} />\n        <CardList monsters = {filteredMonsters}/>\n      </div>\n    )\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}